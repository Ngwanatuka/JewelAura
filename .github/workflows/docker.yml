name: JewelAura CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: docker.io
  IMAGE_NAME_BACKEND: jewelaura-backend
  IMAGE_NAME_FRONTEND: jewelaura-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install backend dependencies
      run: cd api && npm install
    
    - name: Install frontend dependencies
      run: cd front_end && npm install --legacy-peer-deps
    
    - name: Run backend tests
      run: cd api && npm test
      env:
        NODE_ENV: test
        MONGO_URL: mongodb://localhost:27017/jewelaura_test
        JWT_SEC: test_jwt_secret
        PASS_SEC: test_pass_secret
    
    - name: Run frontend tests
      run: cd front_end && npm test -- --run
    
    - name: Lint frontend
      run: cd front_end && npm run lint
    
    - name: Build frontend for testing
      run: cd front_end && npm run build

  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install backend dependencies
      run: cd api && npm install
    
    - name: Install frontend dependencies
      run: cd front_end && npm install --legacy-peer-deps
    
    - name: Auto-fix security issues - Backend
      run: cd api && npm audit fix --force
    
    - name: Auto-fix security issues - Frontend
      run: cd front_end && npm audit fix --legacy-peer-deps --force
    
    - name: Run security audit - Backend
      run: cd api && npm audit --audit-level=high
    
    - name: Run security audit - Frontend
      run: cd front_end && npm audit --audit-level=high

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata - Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=1.1.0
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata - Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=1.1.0
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build backend
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: false
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend
      uses: docker/build-push-action@v5
      with:
        context: ./front_end
        push: false
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deployment step - configure your deployment method here"
        echo "Backend image: ${{ needs.build.outputs.backend-image }}"
        echo "Frontend image: ${{ needs.build.outputs.frontend-image }}"